#! /usr/bin/env python3




class sortFuncs:
    def sortByDDL(x):
        """sort the sections by DDL"""
        return x['DDL']

    def sortByProject(x):
        """sort the sections by project"""
        return x["project"]

    def sortByNumber(x):
        """sort the sections by number"""
        return x["number"]


def sortEntry(choice="DDL"):
    """sort entry
    """
    global sections
    if choice == "DDL":
        sections.sort(key=sortFuncs.sortByDDL)
    elif choice == "project":
        sections.sort(key=sortFuncs.sortByProject)
    elif choice == "number":
        sections.sort(key=sortFuncs.sortByNumber)



def cli():
    """the command line interface
    """
    parser = argparse.ArgumentParser(description="distor")
    parser.add_argument("-a", nargs=7, help="please add: Number, Name" +
                        " of the section, Project name, " +
                        "Time Estimation, DDL, and remarks (6 pa" +
                        "remeters)")
    parser.add_argument("-n", action="store_true", help="whether to " +
                        "section number or not")
    parser.add_argument("-d", nargs=1, help="input the number of the"
                        " section to be deleted")
    parser.add_argument("-c", action="store_true", help="automatically" +
                        " clean sections that have been finished")
    parser.add_argument("-w", nargs=1, help="width of print")
    parser.add_argument("-s", nargs=1, help="choose way of sort"
                        "support now: n - sort by number; "
                        "p - sort by project; "
                        "d - sort by DDL (default)")
    parser.add_argument("-m", nargs=2, help="modify entry, input two"
                        "elements: sectionNumber and modification in "
                        "the form of \"column=modification\"")
    args = parser.parse_args()
    return args


#def addEntry(number, name, project, timeEstimation, wtype, DDL, remarks):
#    """add an entry to the existing pool
#    """
#    sections.append({
#        "number": number,
#        "name": name,
#        "project": project,
#        "timeEstimation": timeEstimation,
#        "wtype": wtype,
#        "DDL": DDL,
#        "remarks": remarks,
#        "timeUsed": "",
#        "afterThoughts": ""
#        })
#    return 0


#def deprecateEntry(entryNumber):
#    """remove the entry from the existing pool and add to the deprecated pool
#    """
#    for i in range(len(sections)):
#        if sections[i]["number"] == entryNumber:
#            deprecatedSections.append(sections.pop(i))
#            return 1  # must return 1!


#def modifyEntry(number, argument):
#    """modify some specific entries
#    """
#    columnName, modification = argument.split("=")
#    if (not columnName) or (not modification):
#        raise ValueError("Invalid modification input")
#    for section in sections:
#        if section["number"] == number:
#            section[columnName] = modification
#            return 0


#def printColor(item):
#    """print color by sty using the cusomized color dictionary"""
#    print(colorsDic[colorTypes[item]], end="")
#
#
#def colorReset():
#    """reset color by sty"""
#    print(fg.rs, end="")
#
#
#
#
#def printSectionHead(toPrintHeaders, toPrintColumns, printLineNumber=False,
#                     printAfterwards=False, width=19):
#    """print entries head"""
#    for i in range(len(toPrintHeaders)):
#        print(f"{toPrintHeaders[i]:^{widthLength[widthType[toPrintColumns[i]]]}}|", end="")
#    print("\n", end="")
#    
#
#def printSection(toPrintHeaders, toPrintColumns, section,
#                 printLineNumber=False, printAfterwards=False, width=19):
#    """print one entry"""
#    for item in toPrintColumns:
#        printColor(item)
#        print(f"{section[item]:^{widthLength[widthType[item]]}}",
#              end="")
#        colorReset()
#        print("|", end="")
#    print("\n", end="")
#
#
#def printSections(printLineNumber=False, printAfterwards=False, width=19):
#    """print the entries in the existing pool, you can choose the way to display
#    """
#    toPrintColumns = ["name", "project", "timeEstimation", "wtype",
#                      "DDL", "remarks"]
#    toPrintHeaders = ["Name", "Project", "T/E", "Type", 
#                      "DDL", "Remarks"]
#    if printLineNumber:
#        toPrintColumns.insert(0, "number")
#        toPrintHeaders.insert(0, "Number")
#    if printAfterwards:
#        toPrintColumns.append("timeUsed")
#        toPrintHeaders.append("T/U")
#        toPrintColumns.append("afterThoughts")
#        toPrintHeaders.append("Thoughts")
#    printSectionHead(toPrintHeaders, toPrintColumns, printLineNumber, printAfterwards, width)
#    for section in sections:
#        printSection(toPrintHeaders, toPrintColumns,
#                     section, printLineNumber, printAfterwards, width)
#    return 0



# sections = loadSection()
# addEntry(name, project, timeEstimation, DDL, remarks)
#sections = {"sections": [{"Number": "00001", "Name": "testname1", 
#"Project": "Mathe", "Time Estimation": "2", "DDL": "2020-06-12", "Remarks": "test"}]}
#args = cli()
#if os.path.exists(storedPath):
#    loadRows()
#saveRows()
#return 0
#if args.a:
#    number = args.a[0]
#    name = args.a[1]
#    project = args.a[2]
#    timeEstimation = args.a[3]
#    wtype = args.a[4]
#    DDL = args.a[5]
#    remarks = args.a[6]
#    testInput(number, name, project, timeEstimation, wtype, DDL, remarks)
#    addEntry(number, name, project, timeEstimation, wtype, DDL, remarks)
#if args.d:
#    if not deprecateEntry(args.d[0]):
#        raise ValueError("Invaid delete input!")
#if args.c:
#    autoClean()

#if args.m:
#    modifyEntry(args.m[0], args.m[1])

#if not args.s:
#    sortEntry()
#elif args.s[0] == "p":
#    sortEntry(choice="project")
#elif args.s[0] == "n":
#    sortEntry(choice="number")
#elif args.s[0] == "d":
#    sortEntry()

#if args.w:
#    width = args.w[0]
#else:
#    width = 17
#if args.n:
#    printSections(printLineNumber=True, printAfterwards=True, width=width)
#else:
#    printSections(width=width)
