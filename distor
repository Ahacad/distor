#! /usr/bin/env python3

import argparse
import os
import json


sections = []
deprecatedSections = []
storedPath = "/home/ahacad/.distor/stored.json"
deprecatedPath = "/home/ahacad/.distor/deprecated.json"


class colors:
    BLACK = "\033[0;30m"        # Black
    RED = "\033[0;31m"          # Red
    GREEN = "\033[0;32m"        # Green
    YELLOW = "\033[0;33m"       # Yellow
    BLUE = "\033[0;34m"         # Blue
    PURPLE = "\033[0;35m"       # Purple
    CYAN = "\033[0;36m"         # Cyan
    WHITE = "\033[0;37m"        # White
    RESET = "\033[0;0m"
    BOLD = "\033[;1m"
    REVERSE = "\033[;7m""]"


def loadSection():
    """load sections from the stored json file
    """
    with open(storedPath) as json_file:
        sections = json.load(json_file)
    global deprecatedSections
    with open(deprecatedPath) as json_file:
        deprecatedSections = json.load(json_file)
    return sections


def writeEntry():
    """store entries to the path
    """
    with open(storedPath, "w") as outfile:
        json.dump(sections, outfile, indent=4)
    with open(deprecatedPath, "w") as outfile:
        json.dump(deprecatedSections, outfile, indent=4)


def addEntry(number, name, project, timeEstimation, DDL, remarks):
    """add an entry to the existing pool
    """
    sections.append({
        "number": number,
        "name": name,
        "project": project,
        "timeEstimation": timeEstimation,
        "DDL": DDL,
        "remarks": remarks,
        "timeUsed": "",
        "afterThoughts": ""
        })
    return 0


def deprecateEntry(entryNumber):
    """remove the entry from the existing pool and add to the deprecated pool
    """
    for i in range(len(sections)):
        if sections[i]["number"] == entryNumber:
            deprecatedSections.append(sections.pop(i))
            return 1  # must return 1!


def modifyEntry(entryNumber):
    """modify some specific entries
    """
    pass


def printEntry(printLineNumber=False, width=19):
    """print the entries in the existing pool, you can choose the way to display
    """
    longWidth = 30
    if printLineNumber:
        print(f"{'NUMBER':^{width}}", end="")
    print(f"|{'SECTION NAME':^{longWidth}}|{'PROJECT NAME':^{width}}|" +
          f"{'TIME ESTIMATED':^{width}}|{'DDL':^{width}}|" +
          f"{'REMARKS':^{longWidth}}|")
    for section in sections:
        name = section["name"]
        project = section["project"]
        timeEstimation = section["timeEstimation"]
        DDL = section["DDL"]
        remarks = section["remarks"]
        if printLineNumber:
            number = section["number"]
        else:
            number = ""
        if number:
            print(f"{number:^{width}}", end="")
        print(f"|{colors.GREEN}{name:^{longWidth}}{colors.RESET}|" +
              f"{colors.YELLOW}{project:^{width}}{colors.RESET}|" +
              f"{colors.BLUE}{timeEstimation:^{width}}{colors.RESET}|" +
              f"{colors.CYAN}{DDL:^{width}}{colors.RESET}|" +
              f"{colors.PURPLE}{remarks:^{longWidth}}{colors.RESET}|")
    return 0


class sortFuncs:
    def sortByDDL(x):
        """sort the """
        return x['DDL']


def sortEntry(choice="DDL"):
    """sort entry
    """
    global sections
    if choice == "DDL":
        sections.sort(key=sortFuncs.sortByDDL)
    else:
        pass


def estimateTime():
    # how the time remained is calculated?
    """estimate whether you can make it before ddl
    """
    pass


def cli():
    """the command line interface
    """
    parser = argparse.ArgumentParser(description="distor")
    parser.add_argument("-a", nargs=6, help="please add: Number, Name" +
                        " of the section, Project name, " +
                        "Time Estimation, DDL, and remarks (6 pa" +
                        "remeters)")
    parser.add_argument("-n", action="store_true", help="whether to " +
                        "section number or not")
    parser.add_argument("-d", nargs=1, help="input the number of the"
                        " section to be deleted")
    parser.add_argument("-c", action="store_true", help="automatically" +
                        " clean sections that have been finished")
    parser.add_argument("-w", nargs=1, help="width of print")
    args = parser.parse_args()
    return args


def testInput(number, name, project, timeEstimation, DDL, remarks):
    """ test the form of the input
    """
    pass


def checkDDL():
    """check whether you can make it before ddl, and thus to 
    change the plan
    """
    pass


def autoClean():
    """automatically clean sections that have been finished
    """
    global deprecatedSections
    for section in sections:
        if section["timeUsed"]:
            deprecatedSections.append(section)
            sections.remove(section)
    return 0


def main():
    global sections
    # sections = loadSection()
    # addEntry(name, project, timeEstimation, DDL, remarks)
    #sections = {"sections": [{"Number": "00001", "Name": "testname1", 
    #"Project": "Mathe", "Time Estimation": "2", "DDL": "2020-06-12", "Remarks": "test"}]}
    args = cli()
    if os.path.exists(storedPath):
        sections = loadSection()
    if args.a:
        number = args.a[0]
        name = args.a[1]
        project = args.a[2]
        timeEstimation = args.a[3]
        DDL = args.a[4]
        remarks = args.a[5]
        testInput(number, name, project, timeEstimation, DDL, remarks)
        addEntry(number, name, project, timeEstimation, DDL, remarks)
    if args.d:
        if not deprecateEntry(args.d[0]):
            raise ValueError("Invaid delete input!")
    if args.c:
        autoClean()
    sortEntry()
    if args.w:
        width = args.w[0]
    else:
        width = 17
    if args.n:
        printEntry(printLineNumber=True, width=width)
    else:
        printEntry(width=width)
    writeEntry()
    return 0


if __name__ == "__main__":
    main()



# WHAT NEXT
# learn to use argparse better, and build usages around it
#
#
# YET TO BUILD:
## LITTLE THINGS
# testInput (with python raise exceptions, help ensure input quality)
#
#
## MAIN FEATURES
###  CHECK whether you can make it before DDL
### MORE COLORS
# use sty or the like to manage colors
### GROUPING
# different coloring for grouped sections
# Divide one section into a series of small sections while being able to
#     represent their relationships
###  FILTER
### interactive software (like khal)
#
#
#
#
## POSSIBLE FEATURES
# More flexibly add columns, use pandas DataFrame or python lists to manage
#     columns, (allow infinite columnts)
#
# Print that automatically fit the length of string?
#
# modiry entries (I can just modify the json manually)
# database robustness: the mechanism to allow modify the basic sections
#    (maybe add more than the names later, so change them into more
#    flexible sections)
#
# better UI
#
## DONE
# x autoclean finished sections
# x delete entries and clear the whole database (with warnings)





# techniques used:
# - json, for data process
# - format alignment and colored printing
# - sty, for colors
# - argParse, for cli
